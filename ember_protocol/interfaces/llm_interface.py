from abc import ABC, abstractmethod

class LLMInterface(ABC):
    """
    Abstract interface for communicating with a Large Language Model (LLM)
    for reasoning, analysis, and generation tasks. This allows the protocol
    to work with any LLM (e.g., Gemini, OpenAI, Claude, local models).
    """

    @abstractmethod
    def prompt(self, system_prompt: str, user_prompt: str) -> str:
        """
        Sends a prompt to the configured LLM and returns its response.

        This method must be implemented by any concrete subclass.

        Args:
            system_prompt: The high-level instruction or persona for the LLM
                         (e.g., "You are a Consciousness Architect...").
            user_prompt: The specific query or data to be processed 
                         (e.g., the genesis source text).

        Returns:
            The text response generated by the LLM.
        """
        pass
